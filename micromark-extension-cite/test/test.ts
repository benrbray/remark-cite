// testing
import assert from "assert";
import { isEqual } from "lodash";

// micromark
import micromark from "micromark/lib";

// project imports
import { citeExtension, html } from '..';

////////////////////////////////////////////////////////////

interface TestCaseSimple {
	description?: string
	markdown: string,
	html: string,
}

/**
 * We expect to match Pandoc on these test cases.
 * The HTML for these test cases was generated by Pandoc.
 */
const pandocMatchCases: TestCaseSimple[] = [
	// valid input for single citation input
	{
		markdown: "[@author:1990]",
		html: '<p><span class="citation" data-cites="author:1990">[@author:1990]</span></p>'
	},{
		markdown: "[prefix @author:1990]",
		html: '<p><span class="citation" data-cites="author:1990">[prefix @author:1990]</span></p>'
	},{
		markdown: "[@author:1990 suffix]",
		html: '<p><span class="citation" data-cites="author:1990">[@author:1990 suffix]</span></p>'
	},{
		markdown: "[see @author:1990:kebab-case, pp. 89-90]",
		html: '<p><span class="citation" data-cites="author:1990:kebab-case">[see @author:1990:kebab-case, pp. 89-90]</span></p>'
	},
	// valid input for multiple citations
	{
		markdown: "[@author:1990; @author:2001]",
		html: '<p><span class="citation" data-cites="author:1990 author:2001">[@author:1990; @author:2001]</span></p>'
	},{
		markdown: "[@author:1990;@author:2001]",
		html: '<p><span class="citation" data-cites="author:1990 author:2001">[@author:1990;@author:2001]</span></p>'
	},{
		markdown: "[@author:1990; @author:2001; @author:2017 ]",
		html: '<p><span class="citation" data-cites="author:1990 author:2001 author:2017">[@author:1990; @author:2001; @author:2017 ]</span></p>'
	},{
		markdown: "[see @author:1990, sec. 3.1; and also @author:2001 on page 77 ]",
		html: '<p><span class="citation" data-cites="author:1990 author:2001">[see @author:1990, sec. 3.1; and also @author:2001 on page 77 ]</span></p>'
	},{
		markdown: "[see @author:1990, sec. 3.1; and also @author:2001 on page 77 ; but don't forget @author:2017 chapter 5]",
		html: '<p><span class="citation" data-cites="author:1990 author:2001 author:2017">[see @author:1990, sec. 3.1; and also @author:2001 on page 77 ; but don\'t forget @author:2017 chapter 5]</span></p>'
	},
	// valid input with surrounding text
	{
		markdown: "lorem upsum dolor [@author:1990] sit amet",
		html: '<p>lorem upsum dolor <span class="citation" data-cites="author:1990">[@author:1990]</span> sit amet</p>'
	},{
		markdown: "lorem ipsum dolor[@author:1990]sit amet",
		html: '<p>lorem ipsum dolor<span class="citation" data-cites="author:1990">[@author:1990]</span>sit amet</p>'
	},{
		markdown: "lorem ipsum dolor [see @author:1990, sec. 3.1; and also @author:2001 on page 77 ; but don't forget @author:2017 chapter 5] sit amet",
		html: '<p>lorem ipsum dolor <span class="citation" data-cites="author:1990 author:2001 author:2017">[see @author:1990, sec. 3.1; and also @author:2001 on page 77 ; but don\'t forget @author:2017 chapter 5]</span> sit amet</p>'
	},
	// weird spacing
	{
		markdown: "[ @author:1990]",
		html: '<p><span class="citation" data-cites="author:1990">[ @author:1990]</span></p>'
	},{
		markdown: "[@author:1990 ]",
		html: '<p><span class="citation" data-cites="author:1990">[@author:1990 ]</span></p>'
	},{
		markdown: "[@author:1990;@author]",
		html: '<p><span class="citation" data-cites="author:1990 author">[@author:1990;@author]</span></p>'
	},
	// various kinds of malformed input
	{
		markdown: "[author:1990]",
		html: '<p>[author:1990]</p>'
	},
	{
		markdown: "[@ author:1990]",
		html: '<p>[@ author:1990]</p>'
	},
	{
		markdown: "[@ author:1990]",
		html: '<p>[@ author:1990]</p>'
	}
];


/**
 * We expect to diverge from Pandoc on these test cases.
 * The HTML for these cases was generated manually.
 */
const pandocExceptCases : (TestCaseSimple & { pandoc: string})[] = [
	// for these cases, we expect to diverge from pandoc
	// due to implementation details of the tokenizer
	{
		markdown: "[bad@author:1990]",
		html: '<p><span class="citation" data-cites="author:1990">[bad@author:1990]</span></p>',
		pandoc: '<p>[bad@author:1990]</p>'
	},{
		markdown: "[@aut\nhor:1990]",
		html: '<p>[@aut\nhor:1990]</p>',
		pandoc: '<p><span class="citation" data-cites="aut">[@aut hor:1990]</span></p>'
	},
	// for these cases, we expect to diverge from pandoc because
	// bracket-less citations like @author1990 are not yet implemented
	{
		markdown: "[@author:1990;]",
		html: '<p>[@author:1990;]</p>',
		pandoc: '<p>[<span class="citation" data-cites="author:1990">@author:1990</span>;]</p>'
	},
	{
		markdown: "[@author:1990;bad]",
		html: '<p>[@author:1990;bad]</p>',
		pandoc: '<p>[<span class="citation" data-cites="author:1990">@author:1990</span>;bad]</p>'
	}
]

////////////////////////////////////////////////////////////

describe('micromark-extension-cite', () => {

	context("matches pandoc html5 output", () => {

		let idx = 0;
		for(let testCase of pandocMatchCases) {
			let desc = `[pandoc-match ${("00" + (++idx)).slice(-3)}]` + (testCase.description || "");
			it(desc, () => {
				let serialized = micromark(testCase.markdown, {
					extensions: [citeExtension({})],
					htmlExtensions: [html()]
				});

				assert.strictEqual(serialized, testCase.html);
			});
		}
	});

	context("expected deviations from pandoc html5 output", () => {

		let idx = 0;
		for(let testCase of pandocExceptCases) {
			let desc = `[pandoc-except ${("00" + (++idx)).slice(-3)}]` + (testCase.description || "");
			it(desc, () => {
				let serialized = micromark(testCase.markdown, {
					extensions: [citeExtension({})],
					htmlExtensions: [html()]
				});

				assert.strictEqual(serialized, testCase.html);
			});
		}
	});
	
})